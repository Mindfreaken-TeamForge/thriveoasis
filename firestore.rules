rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(oasisId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/oasis/$(oasisId)) &&
        get(/databases/$(database)/documents/oasis/$(oasisId)).data.ownerId == request.auth.uid;
    }
    
    function isMember(oasisId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/oasis/$(oasisId)/members/$(request.auth.uid));
    }
    
    function hasPermission(oasisId, permission) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/oasis/$(oasisId)/members/$(request.auth.uid)) &&
        (
          get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(request.auth.uid)).data.permissions.hasAny([permission, 'administrator']) || 
          get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(request.auth.uid)).data.role == 'owner'
        );
    }

    // User profiles and data
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if request.auth.uid == userId;
      
      match /createdOasis/{oasisId} {
        allow read: if isSignedIn();
        allow write: if request.auth.uid == userId;
      }
      
      match /joinedOasis/{oasisId} {
        allow read: if isSignedIn();
        allow write: if request.auth.uid == userId;
      }
      
      match /tokens/fcm {
        allow read, write: if request.auth.uid == userId;
      }
      
      // Oasis subcollection under users
      match /oasis/{oasisId} {
        allow read: if isSignedIn();
        
        // Polls collection
        match /polls/{pollId} {
          allow read: if (
            isSignedIn() && 
            (
              request.auth.uid == userId || // Owner can read
              isMember(oasisId) // Members can read
            )
          );
          
          allow create: if (
            isSignedIn() &&
            request.auth.uid == userId && // Only owner can create
            hasPermission(oasisId, 'administrator')
          );
          
          allow update: if (
            isSignedIn() &&
            (
              request.auth.uid == userId || // Owner can update
              isMember(oasisId) // Members can update (for voting)
            )
          );
          
          allow delete: if (
            isSignedIn() &&
            request.auth.uid == userId && // Only owner can delete
            hasPermission(oasisId, 'administrator')
          );
          
          // Poll votes subcollection
          match /votes/{voteId} {
            allow read: if isSignedIn() && isMember(oasisId);
            allow create: if isSignedIn() && isMember(oasisId);
            allow update: if isSignedIn() && request.auth.uid == resource.data.userId;
            allow delete: if isSignedIn() && request.auth.uid == resource.data.userId;
          }
        }
      }
    }

    // Oasis documents
    match /oasis/{oasisId} {
      allow read: if isMember(oasisId) || isOwner(oasisId);
      allow create: if isSignedIn();
      allow update: if isOwner(oasisId) || hasPermission(oasisId, 'administrator');
      allow delete: if isOwner(oasisId);
      
      // Members collection
      match /members/{memberId} {
        allow read: if isMember(oasisId);
        allow create: if isOwner(oasisId) || hasPermission(oasisId, 'administrator');
        allow update: if isOwner(oasisId) || 
          (hasPermission(oasisId, 'administrator') && 
           get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(memberId)).data.role != 'owner');
        allow delete: if isOwner(oasisId) || 
          (hasPermission(oasisId, 'administrator') && 
           get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(memberId)).data.role != 'owner');
      }
      
      // Roles collection
      match /roles/{roleId} {
        allow read: if isMember(oasisId);
        allow write: if isOwner(oasisId) || hasPermission(oasisId, 'administrator');
      }
      
      // Messages collection
      match /messages/{messageId} {
        allow read: if isMember(oasisId);
        allow create: if isMember(oasisId) && hasPermission(oasisId, 'send_messages');
        allow update: if request.auth.uid == resource.data.authorId || 
          hasPermission(oasisId, 'moderate_content');
        allow delete: if request.auth.uid == resource.data.authorId || 
          hasPermission(oasisId, 'moderate_content');
      }
      
      // Admin messages
      match /adminMessages/{messageId} {
        allow read: if hasPermission(oasisId, 'administrator');
        allow create: if hasPermission(oasisId, 'administrator');
        allow update: if hasPermission(oasisId, 'administrator');
        allow delete: if false; // Admin messages cannot be deleted
      }
      
      // Files collection
      match /files/{fileId} {
        allow read: if isMember(oasisId);
        allow create: if isMember(oasisId) && hasPermission(oasisId, 'upload_files');
        allow delete: if isOwner(oasisId) || 
          (hasPermission(oasisId, 'moderate_content') && 
           request.auth.uid == resource.data.uploadedBy);
      }
      
      // Tokens/Invites
      match /tokens/{tokenId} {
        allow read: if isMember(oasisId);
        allow create: if hasPermission(oasisId, 'create_invites');
        allow update: if hasPermission(oasisId, 'administrator');
        allow delete: if hasPermission(oasisId, 'administrator');
      }
      
      // Token usage tracking
      match /tokenUsage/{usageId} {
        allow read: if hasPermission(oasisId, 'administrator');
        allow create: if isSignedIn();
        allow update, delete: if false;
      }
      
      // Admin calls
      match /adminCalls/{callId} {
        allow read, write: if hasPermission(oasisId, 'administrator');
        
        match /messages/{messageId} {
          allow read, write: if hasPermission(oasisId, 'administrator');
        }
      }
      
      // Unban requests
      match /unbanRequests/{requestId} {
        allow read: if isSignedIn() && isMember(oasisId);  // Allow members to read and list
        
        allow create: if (
          isSignedIn() && 
          request.resource.data.userId == request.auth.uid
        );
        
        allow update, delete: if (
          hasPermission(oasisId, 'administrator') || 
          hasPermission(oasisId, 'moderate_content')
        );
      }
      
      // Banned members collection
      match /bannedMembers/{userId} {
        allow read: if isMember(oasisId);
        allow write: if hasPermission(oasisId, 'administrator') || 
                    hasPermission(oasisId, 'moderate_content');
      }
    }
  }
} 