rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(oasisId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/oasis/$(oasisId)) &&
        get(/databases/$(database)/documents/oasis/$(oasisId)).data.ownerId == request.auth.uid;
    }
    
    function isMember(oasisId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/oasis/$(oasisId)/members/$(request.auth.uid));
    }
    
    function hasPermission(oasisId, permission) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/oasis/$(oasisId)/members/$(request.auth.uid)) &&
        (
          get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(request.auth.uid)).data.permissions.hasAny([permission, 'administrator']) || 
          get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(request.auth.uid)).data.role == 'owner'
        );
    }

    // User profiles and data
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write, create, update, delete: if request.auth.uid == userId;
      
      match /createdOasis/{oasisId} {
        allow read: if isSignedIn();
        allow write: if request.auth.uid == userId;
      }
      
      match /joinedOasis/{oasisId} {
        allow read: if isSignedIn();
        allow write: if request.auth.uid == userId;
      }
      
      match /tokens/fcm {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // Oasis documents
    match /oasis/{oasisId} {
      allow read: if isMember(oasisId) || isOwner(oasisId);
      allow create: if isSignedIn();
      allow update: if isOwner(oasisId) || hasPermission(oasisId, 'administrator');
      allow delete: if isOwner(oasisId);
      
      // Members collection
      match /members/{memberId} {
        allow read: if isMember(oasisId);
        allow update: if 
          hasPermission(oasisId, 'moderate_content') && 
          (
            // Get the role of the member being modified
            get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(memberId)).data.role != 'owner' &&
            (
              // Mods can't modify admins or other mods
              !hasPermission(oasisId, 'administrator') && 
              get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(memberId)).data.role != 'administrator' &&
              get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(memberId)).data.role != 'moderator'
            ) ||
            // Admins can modify mods but not other admins or owner
            (
              hasPermission(oasisId, 'administrator') &&
              get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(memberId)).data.role != 'administrator'
            ) ||
            // Owner can modify anyone except themselves
            (
              isOwner(oasisId) && 
              memberId != request.auth.uid
            )
          );
      }
      
      // Messages collection
      match /messages/{messageId} {
        allow read: if isMember(oasisId);
        allow create: if isMember(oasisId) && hasPermission(oasisId, 'send_messages');
        allow update: if request.auth.uid == resource.data.authorId || 
          hasPermission(oasisId, 'moderate_content');
      }
      
      // Admin messages
      match /adminMessages/{messageId} {
        allow read: if hasPermission(oasisId, 'administrator');
        allow create: if hasPermission(oasisId, 'administrator');
        allow update: if request.auth.uid == resource.data.authorId || 
          hasPermission(oasisId, 'administrator');
      }
      
      // Files collection
      match /files/{fileId} {
        allow read: if isMember(oasisId);
        allow create: if isMember(oasisId) && hasPermission(oasisId, 'upload_files');
        allow delete: if isOwner(oasisId) || 
          (hasPermission(oasisId, 'moderate_content') && 
           request.auth.uid == resource.data.uploadedBy);
      }
      
      // Tokens/Invites
      match /tokens/{tokenId} {
        allow read: if isMember(oasisId);
        allow create: if hasPermission(oasisId, 'create_invites');
        allow update: if hasPermission(oasisId, 'administrator');
        allow delete: if hasPermission(oasisId, 'administrator');
      }
      
      // Token usage tracking
      match /tokenUsage/{usageId} {
        allow read: if hasPermission(oasisId, 'administrator');
        allow create: if isSignedIn();
        allow update, delete: if false;
      }
      
      // Admin calls
      match /adminCalls/{callId} {
        allow read, write: if hasPermission(oasisId, 'administrator');
        
        match /messages/{messageId} {
          allow read, write: if hasPermission(oasisId, 'administrator');
        }
      }
      
      // Unban requests
      match /unbanRequests/{requestId} {
        allow read: if isSignedIn() && isMember(oasisId);
        
        allow create: if (
          isSignedIn() && 
          request.resource.data.userId == request.auth.uid
        );
        
        allow update, delete: if (
          hasPermission(oasisId, 'administrator') || 
          hasPermission(oasisId, 'moderate_content')
        );
      }
      
      // Banned members collection
      match /bannedMembers/{userId} {
        allow read: if hasPermission(oasisId, 'moderate_content');
        
        allow write: if 
          hasPermission(oasisId, 'moderate_content') &&
          (
            // Get the role of the member being banned
            get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(userId)).data.role != 'owner' &&
            (
              // Mods can't ban admins or other mods
              !hasPermission(oasisId, 'administrator') && 
              get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(userId)).data.role != 'administrator' &&
              get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(userId)).data.role != 'moderator'
            ) ||
            // Admins can ban mods but not other admins or owner
            (
              hasPermission(oasisId, 'administrator') &&
              get(/databases/$(database)/documents/oasis/$(oasisId)/members/$(userId)).data.role != 'administrator'
            ) ||
            // Owner can ban anyone except themselves
            (
              isOwner(oasisId) && 
              userId != request.auth.uid
            )
          );
      }

      // Emotes collection
      match /emotes/{emoteId} {
        allow read: if isMember(oasisId) || isOwner(oasisId);
        allow create, update: if hasPermission(oasisId, 'administrator') || isOwner(oasisId);
        allow delete: if hasPermission(oasisId, 'administrator') || isOwner(oasisId) || 
          (request.auth.uid == resource.data.createdBy && hasPermission(oasisId, 'moderate_content'));
      }

      // System collection for emote counter
      match /system/emoteCounter {
        allow read: if hasPermission(oasisId, 'administrator') || isOwner(oasisId);
        allow write: if hasPermission(oasisId, 'administrator') || isOwner(oasisId);
      }

      // Posts collection
      match /posts/{postId} {
        allow read: if isMember(oasisId);
        allow create: if isMember(oasisId) && hasPermission(oasisId, 'send_messages');
        allow update: if request.auth.uid == resource.data.authorId || 
          hasPermission(oasisId, 'moderate_content');
        allow delete: if hasPermission(oasisId, 'moderate_content') ||
          (request.auth.uid == resource.data.authorId && 
           request.time < resource.data.timestamp + duration.value(5, 'm'));
      }

      // Posts reactions subcollection
      match /posts/{postId}/reactions/{reactionId} {
        allow read: if isMember(oasisId);
        allow write: if isMember(oasisId);
      }

      // Polls collection
      match /polls/{pollId} {
        allow read: if 
          hasPermission(oasisId, 'administrator') || 
          isOwner(oasisId);
        
        allow create, update, delete: if 
          hasPermission(oasisId, 'administrator') || 
          isOwner(oasisId);

        // Poll votes
        match /votes/{voteId} {
          allow read, write: if 
            hasPermission(oasisId, 'administrator') || 
            isOwner(oasisId);
        }

        // Poll options
        match /options/{optionId} {
          allow read, write: if 
            hasPermission(oasisId, 'administrator') || 
            isOwner(oasisId);
        }
      }

      // Add rules for poll results
      match /pollResults/{resultId} {
        allow read, write: if 
          hasPermission(oasisId, 'administrator') || 
          isOwner(oasisId);
      }
    }

    // Global system collection
    match /system/{docId} {
      allow read, write: if request.auth != null && (
        docId == 'oasisEmoteCounter' ||
        docId == 'globalEmoteCounter'
      );
    }

    // Per-oasis emote counter
    match /oasis/{oasisId}/system/emoteCounter {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        hasPermission(oasisId, 'administrator') || 
        isOwner(oasisId)
      );
    }

    // Allow batch operations for profile updates
    match /{path=**}/messages/{messageId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.authorId;
    }

    match /{path=**}/members/{memberId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == memberId;
    }

    match /{path=**}/adminMessages/{messageId} {
      allow read: if request.auth != null;
      allow update: if request.auth != null && request.auth.uid == resource.data.authorId;
    }

    // User's personal posts collection
    match /users/{userId}/oasis/{oasisId}/posts/{postId} {
      allow read: if request.auth.uid == userId && 
        isMember(oasisId);
      allow write: if request.auth.uid == userId && 
        isMember(oasisId) && 
        hasPermission(oasisId, 'send_messages');
    }
  }
}